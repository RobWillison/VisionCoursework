function dotProd = NormalisedCorrelation(im, template)

%calculate the means of the vectorised images
templateMean = mean(template(:));

templateSize = size(template, 1) * size(template, 2);

im = im(:,:,1);
template = template(:,:,1);
size(template);
imMean = filter2(repmat(1/templateSize, size(template, 1), size(template, 2)), im, 'same');

MxY = filter2(templateMean, im);
XMy = filter2(template, imMean);
MxMy = filter2(templateMean, imMean);
XY = filter2(template, im);

dotProd = XY +  MxMy - XMy - MxY;

% calculateAbsoluteDeviation

n = filter2(ones(size(template, 1), size(template, 2)), ones(size(im, 1), size(im, 2)), 'same');
total = filter2(ones(size(template, 1), size(template, 2)), im, 'same');
imSquared = im .^2;
meanSquared = imMean .^2;
MyY2 = 2 .* total .* (imMean .* n);

templatePart = sum(sum((template - templateMean) .^ 2));

dotProd = dotProd ./ (sqrt(templatePart * (imSquared - meanSquared)));

% 
% dotProd = dotProd ./ imStdDev;

% for x = 17:size(im, 1) + 16
%     for y = 17:size(im, 2) + 16
%         imageUnderTemp = imPad(x - 16:x + 16, y - 16:y + 16, 1);
%         imageUnderTemp = imageUnderTemp - mean2(imageUnderTemp);
%         
%         dotProd = dot(templateVec, imageUnderTemp(:)) / std(imageUnderTemp(:));
%         
%         array(x-16,y-16,1) = dotProd;
%     end;
% end;


end